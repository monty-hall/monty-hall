{"ast":null,"code":"var _jsxFileName = \"/c/users/silenr/documents/github/monty-hall/src/datavis.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport 'react-vis/dist/style.css';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, Crosshair } from 'react-vis';\nconst initData = [[{\n  x: 0,\n  y: 0\n}]];\nlet num_games = 1;\nlet num_wins = 0;\n\nfunction generateData() {\n  return initData[0];\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class Datavis extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._onMouseLeave = () => {\n      this.setState({\n        crosshairValues: []\n      });\n    };\n\n    this._onNearestX = (value, {\n      index\n    }) => {\n      this.setState({\n        crosshairValues: initData.map(d => d[index])\n      });\n    };\n\n    this.state = {\n      data: generateData(),\n      crosshairValues: []\n    };\n  }\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\n\n\n  async updateData(plays) {\n    var i;\n\n    for (i = 0; i < plays; i++) {\n      const win = Math.floor(Math.random() * 3);\n\n      if (win > 0) {\n        num_wins++;\n      }\n\n      const point = {\n        x: num_games,\n        y: num_wins / num_games\n      };\n      initData[0].push(point);\n      num_games++;\n      this.setState({\n        data: initData[0]\n      });\n      var sleepTime = 1 / plays;\n      await sleep(sleepTime);\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main1col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(XYPlot, {\n      height: 400,\n      width: 600,\n      yDomain: [0, 1],\n      onMouseLeave: this._onMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      title: \"Number of Games Played\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      title: \"Win Percentage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(LineSeries, {\n      onNearestX: this._onNearestX,\n      data: data,\n      color: \"#d6001c\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Crosshair, {\n      values: this.state.crosshairValues,\n      className: 'test-class-name',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"blueButton\",\n      onClick: () => this.updateData(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"run 1 time\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"blueButton\",\n      onClick: () => this.updateData(10),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"run 10 time\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"blueButton\",\n      onClick: () => this.updateData(100),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"run 100 time\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"blueButton\",\n      onClick: () => this.updateData(1000),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"run 1000 time\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"Current win percentage: \", Math.round(data[data.length - 1].y * 100000) / 1000, \"%\"));\n  }\n\n}","map":{"version":3,"sources":["/c/users/silenr/documents/github/monty-hall/src/datavis.js"],"names":["React","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","Crosshair","initData","x","y","num_games","num_wins","generateData","sleep","ms","Promise","resolve","setTimeout","Datavis","Component","constructor","props","_onMouseLeave","setState","crosshairValues","_onNearestX","value","index","map","d","state","data","updateData","plays","i","win","Math","floor","random","point","push","sleepTime","render","round","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport 'react-vis/dist/style.css'\r\nimport {XYPlot, \r\n      LineSeries, \r\n      VerticalGridLines,\r\n      HorizontalGridLines,\r\n      XAxis,\r\n      YAxis,\r\n      Crosshair} from 'react-vis';\r\n\r\nconst initData = [[\r\n  {x: 0, y: 0}\r\n]];\r\n\r\nlet num_games = 1;\r\nlet num_wins = 0;\r\n\r\nfunction generateData() {\r\n  return initData[0];\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default class Datavis extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: generateData(),\r\n      crosshairValues: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  _onMouseLeave = () => {\r\n    this.setState({crosshairValues: []});\r\n  };\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  _onNearestX = (value, {index}) => {\r\n    this.setState({crosshairValues: initData.map(d => d[index])});\r\n  };\r\n\r\n  async updateData(plays) {\r\n    var i;\r\n    for (i = 0; i < plays; i++) {\r\n      const win = Math.floor(Math.random() * 3);\r\n      if (win > 0) {\r\n        num_wins++;\r\n      }\r\n      const point = {x: num_games, y: num_wins/num_games};\r\n      initData[0].push(point);\r\n      num_games++;\r\n      this.setState({data: initData[0]});\r\n      var sleepTime = 1/plays;\r\n      await sleep(sleepTime);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const data = this.state.data;\r\n    return (\r\n      <div className=\"main1col\">\r\n        <XYPlot height={400} width= {600}\r\n          yDomain={[0, 1]}\r\n          onMouseLeave={this._onMouseLeave}>\r\n          <VerticalGridLines />\r\n          <HorizontalGridLines />\r\n          <XAxis title=\"Number of Games Played\"/>\r\n          <YAxis title=\"Win Percentage\"/>\r\n          <LineSeries\r\n            onNearestX={this._onNearestX}\r\n            data={data}\r\n            color=\"#d6001c\"\r\n          />\r\n          <Crosshair\r\n            values={this.state.crosshairValues}\r\n            className={'test-class-name'}\r\n          />\r\n        </XYPlot>\r\n        <div className=\"blueButton\" onClick={() => this.updateData(1)}>run 1 time</div>\r\n        <div className=\"blueButton\" onClick={() => this.updateData(10)}>run 10 time</div>\r\n        <div className=\"blueButton\" onClick={() => this.updateData(100)}>run 100 time</div>\r\n        <div className=\"blueButton\" onClick={() => this.updateData(1000)}>run 1000 time</div>\r\n        <p>Current win percentage: {Math.round(data[data.length-1].y*100000)/1000}%</p>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}